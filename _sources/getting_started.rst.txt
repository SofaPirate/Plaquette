Getting started
===============

This short introduction will guide you through the first steps of using Plaquette.

We also recommend watching our introductory `video tutorial series <https://www.youtube.com/playlist?list=PLO0YogNIPwXwEsNsoQSKeCdYlepWFrYip>`_.

.. image:: https://img.youtube.com/vi/1H_lj-bvPNc/maxresdefault.jpg
    :alt: IMAGE ALT TEXT HERE
    :target: https://www.youtube.com/playlist?list=PLO0YogNIPwXwEsNsoQSKeCdYlepWFrYip

Step 1: Install Plaquette
--------------------------

If you do not have Arduino installed on your machine you need to
`download and install the Arduino
IDE <https://www.arduino.cc/en/Main/Software>`__ for your platform.

Once Arduino is installed, please install Plaquette as an Arduino
library following `these
instructions <https://www.arduino.cc/en/Guide/Libraries>`__.

Step 2: Your first Plaquette program
------------------------------------

We will begin by creating a simple program that will make the built-in
LED on your microcontroller blink.

Create a new sketch
~~~~~~~~~~~~~~~~~~~

Create a new empty sketch by selecting **File > New**.

**IMPORTANT:** New Arduino sketches are initialized with some "slug"
starting code. Make sure to erase the content of the sketch before
beginning. You can use **Edit > Select All** and then click **Del** or
**Backspace**.

Include library
~~~~~~~~~~~~~~~

Include the Plaquette library by typing:

.. code:: cpp

    #include <Plaquette.h>

Create an output unit
~~~~~~~~~~~~~~~~~~~~~

Now, we will create a new unit that will allow us to control the
built-in LED:

.. code:: cpp

    DigitalOut myLed(13); //or whatever pin the built-in LED is located on for your microcontroller

In this statement, ``DigitalOut`` is the **type** of unit that we are
creating. There also exists other types of units, which will be described later.
``DigitalOut`` is a type of software unit that can represent one of the many
hardware pins for digital output on the Arduino board. One way to think about this is that
the ``DigitalOut`` is a "virtual" version of the Arduino pin. These can be set to one of two
states: ("on/off", "high/low", "1/0").

The word ``myLed`` is a **name** for the object we are creating.

Finally, ``13`` is a **parameter** of the object ``myLed`` that
specifies the hardware *pin* that it corresponds to on the board.

In English, the statement would thus read as: "Create a unit named
``myLed`` of type ``DigitalOut`` on pin ``13``."

Create an input unit
~~~~~~~~~~~~~~~~~~~~

We will now create another unit that will generate a signal which will
be sent to the LED to make it blink. To this effect, we will use the
``SquareOsc`` unit type which generates a `square
wave <https://en.wikipedia.org/wiki/Square_wave>`__ oscillating between
"on/high/one" and "off/low/zero" at a regular period of 2.0 seconds, and
a `duty-cycle <https://en.wikipedia.org/wiki/Duty_cycle>`__ of 50%:

.. code:: cpp

    SquareOsc myOsc(2.0, 0.5);

Create the begin() function
~~~~~~~~~~~~~~~~~~~~~~~~~~~

Each Plaquette sketch necessitates the declaration of two functions:
``begin()`` and ``step()``.

Function ``begin()`` is called only once at the beginning of the sketch
(just like the
`setup() <https://www.arduino.cc/reference/en/language/structure/sketch/setup/>`__
function in Arduino). In our case, we do not to perform any special
configuration at startup so we will leave the ``begin()`` function
empty:

.. code:: cpp

    void begin() {}

Create the step() function
~~~~~~~~~~~~~~~~~~~~~~~~~~

The ``step()`` function is called repetitively and indefinitely during
the course of the program (like the
`loop() <https://www.arduino.cc/reference/en/language/structure/sketch/loop/>`__
function in Arduino).

Here, we will send the signal generated by the ``myOsc`` input unit
to the ``myLed`` output unit. We will do this by using Plaquette's special
``>>`` operator:

.. code:: cpp

    void step() {
      myOsc >> myLed;
    }

In plain English, the statement ``myOsc >> myLed`` reads as: "Take the
value generated by ``myOsc`` and put it in ``myLed``."

Upload sketch
~~~~~~~~~~~~~

Upload your sketch to the Arduino board. You should see the LED on the
board blinking once every two seconds at a regular pace.

Et voil√†!

Full code
~~~~~~~~~

.. code:: cpp

    #include <Plaquette.h>

    DigitalOut myLed(13);

    SquareOsc myOsc(2.0, 0.5);

    void begin() {}

    void step() {
      myOsc >> myLed;
    }

Step 3 : Experiment!
--------------------

Period and duty cycle
~~~~~~~~~~~~~~~~~~~~~

Try changing the *period* and/or *duty-cycle* parameters in the square
wave unit construction:

.. code:: cpp

    SquareOsc myOsc(<period>, <duty-cycle>);

-  ``<period>`` can be any positive number representing the period of
   oscillation (in seconds)
-  ``<duty-cycle>`` can be any number between 0.0 (0%) and 1.0 (100%),
   and represents the proportion of the period during which the signal
   is "high" (ie. "on duty")

What happens?

Adding and multiplying
~~~~~~~~~~~~~~~~~~~~~~

Add another oscillator with a different period and duty cycle: multiply
their values and send the result to the LED.

.. code:: cpp

    SquareOsc myOsc2(<period>, <duty-cycle>);
    // ...
    void step() {
      (myOsc * myOsc2) >> myLed;
    }

Try adding their values instead: what do you see?

Use a conditional
~~~~~~~~~~~~~~~~~

Add a third oscillator that will "switch" between the two oscillators
every 5 seconds using an
`if...else <https://www.arduino.cc/reference/en/language/structure/control-structure/if/>`__
statement.

.. code:: cpp

    // TIP: omitting the duty-cycle parameter results in default value (0.5)
    SquareOsc mySwitcher(5.0);
    // ...
    void step() {
      if (mySwitcher)
        myOsc >> myLed;
      else
        myOsc2 >> myLed;
    }

**ADVANCED**: You can rewrite this expression in a more compact way
using the `? : conditional
operator <https://www.tutorialspoint.com/arduino/arduino_conditional_operator.htm>`__:

.. code:: cpp

    void step() {
      (mySwitcher ? myOsc : myOsc2) >> myLed;
    }

More examples
~~~~~~~~~~~~~

You will find more examples in **File > Examples > Plaquette** including:

- Using a button
- Using an analog input such as a photocell or potentiometer
- Using an analog output
- Basic filtering (smoothing, re-scaling)
- Serial input and output
